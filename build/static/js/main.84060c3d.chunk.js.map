{"version":3,"sources":["landing-page.js","navbar.js","validation-error.js","forgot-password.js","personalized-home-page.js","CircleButton/circle-button.js","view-past-workout.js","past-workouts.js","new-workout-checkbox.js","create-new-workout.js","header.js","log-in.js","error-boundary.js","sign-up.js","2-create-new-workout-checkbox.js","App.js","index.js"],"names":["LandingPage","className","to","React","Component","Navbar","props","ValidationError","message","ForgotPassword","state","error","newPassword","value","touched","repeatNewPassword","errors","handleSubmit","e","preventDefault","data","formData","FormData","target","console","log","validateNewPassword","setState","validateRepeatNewPassword","password","this","inputPassword","undefined","trim","match","newPasswordError","repeatNewPasswordError","onSubmit","htmlFor","name","id","type","onChange","updateNewPassword","required","updateRepeatNewPassword","PersonalizedHomePage","NavCircleButton","tag","children","otherProps","createElement","join","ViewPastWorkout","onClick","history","goBack","PastWorkouts","defaultProps","Checkbox","label","isSelected","onCheckboxChange","checked","Header","Login","loginEmail","loginPassword","validateEmail","validatePassword","email","inputEmail","emailError","passwordError","placeholder","updateEmail","updatePassword","ErrorBoundary","hasError","errorMessage","SignUp","signUpEmail","signUpPassword","signUpFirstName","validatateFirstName","formatQueryParams","firstName","inputFirstName","nameError","updateFirstName","OPTIONS","CreateNewWorkout2","checkboxes","reduce","options","option","workoutTimeValue","workoutTypeValue","selectAllCheckboxes","Object","keys","forEach","checkbox","prevState","handleCheckboxChange","changeEvent","handleTimeChange","handleTypeChange","handleFormSubmit","filter","createCheckbox","key","createCheckboxes","map","App","first_name","exact","path","component","renderNav","renderMainPages","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.84060c3d.chunk.js","sourcesContent":["import React from 'react';\nimport { Link, Route } from 'react-router-dom'\n\nexport default class LandingPage extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <main className=\"main\">\n          <h1>Workout Creator</h1>\n            <p>Create your own metabolic-conditoning workout</p>\n            <p>Choose how long you want to workout for and the muscle groups you want to work, and we'll do the rest!</p>\n          <button className=\"big-btn\">\n            <Link \n              to='/sign-up'\n            > Sign Up\n            </Link>\n          </button>\n          <button className=\"big-btn\">\n          <Link\n            to='/login'>\n              Login\n          </Link>\n        </button>\n        </main>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom'\n\nexport default function Navbar(props) {\n  return (\n    <div className=\"navbar\">\n      <ul>\n        <li className=\"nav-link\">\n          <Link\n            to='/home'\n          >Home</Link>\n        </li>\n        <li className=\"nav-link\">\n          <Link\n            to='/create-workout'\n          >Create Workout</Link>\n        </li>\n        <li className=\"nav-link\">\n          <Link\n            to='/past-workouts'\n          >Past Workouts</Link>\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function ValidationError(props) {\n    if(props.message) {\n        return (\n            <div className='error'>{props.message}</div>\n        );\n    }\n    return <></>\n}","import React from 'react';\nimport ValidationError from './validation-error'\n\nexport default class ForgotPassword extends React.Component {\n  state = {\n    error: null,\n    newPassword: {\n      value: '',\n      touched: false\n    },\n\n    repeatNewPassword: {\n      value: '',\n      touched: false\n    },\n\n    errors: {\n      newPassword: 'You must enter a valid password',\n      repeatNewPassword: 'Passwords must match'\n    }\n  }\n\n  updateNewPassword(password) {\n    this.setState({ newPassword: {value: password, touched: true } })\n  }\n\n  updateRepeatNewPassword(password) {\n    this.setState({ repeatNewPassword: { value: password, touched: true } })\n  }\n\n  validateNewPassword(inputPassword) {\n    if (inputPassword == undefined) {\n      inputPassword = this.state.newPassword.value.trim();\n   }\n    const passwordFormat = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])\\w{8,}$/;\n    if (!inputPassword.match(passwordFormat)) {\n      return 'Valid password is required'\n    } return ' '\n  }\n\n  validateRepeatNewPassword(inputPassword) {\n    const newPassword = this.state.newPassword.value.trim();\n    if (inputPassword == undefined) {\n      inputPassword = this.state.repeatNewPassword.value.trim();\n   }\n    if (!inputPassword.match(newPassword)) {\n      return 'Passwords must match'\n    } return ' '\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    //create an object to store the search filters\n    const data = {}\n    //get all the from data from the form component\n    const formData = new FormData(e.target)\n\n    //for each of the keys in form data populate it with form value\n    for (let value of formData) {\n        data[value[0]] = value[1]\n    }\n    console.log(data)\n\n    let { newPassword, repeatNewPassword } = data\n    if (this.validateNewPassword(newPassword) === '') {\n      this.setState({\n          error: 'password is not valid'\n      })\n    }\n\n    if (this.validateRepeatNewPassword(repeatNewPassword) === '') {\n      this.setState({\n          error: 'password is not valid'\n      })\n    }\n\n    // this.setState({\n    //   newPassword.value: data.newPassword,\n    //   repeatNewPassword.value: data.repeatNewPassword\n     \n    // })\n\n  //   //POST request to API endpoint (/users)\n\n  // //check if the state is populated with the search params data\n  // console.log(this.state)\n\n  //const searchURL = `${config.API_ENDPOINT}/forgot-password`\n\n  // const queryString = this.formatQueryParams(data)\n\n  //  //sent all the params to the final url\n  //  //const url = searchURL + '?' + queryString\n\n  //  console.log(url)\n\n  //   //define the API call parameters\n  //   const options = {\n  //       method: 'POST',\n  //       header: {\n  //           \"Authorization\": \"\",\n  //           \"Content-Type\": \"application/json\"\n  //       }\n  //   }\n\n  //   //useing the url and paramters above make the api call\n  //   fetch(url, options)\n\n  //       // if the api returns data ...\n  //       .then(res => {\n  //           if (!res.ok) {\n  //               throw new Error('Something went wrong, please try again later.')\n  //           }\n  //            // ... convert it to json\n  //            return res.json()\n  //       })\n  //           // use the json api output\n  //       .then(data => {\n\n  //         //check if there is meaningfull data\n  //         console.log(data);\n  //         // check if there are no results\n  //         if (data.totalItems === 0) {\n  //           throw new Error('No data found')\n  //       }\n\n  //     })\n  //       .catch(err => {\n  //         this.setState({\n  //           error: err.message\n  //       })\n  //     })\n}\n\n  render() {\n    const newPasswordError = this.validateNewPassword();\n    const repeatNewPasswordError = this.validateRepeatNewPassword();\n    return (\n      <div className=\"App\">\n        <main className=\"main\">\n              <h1>Forgot Password</h1>\n              <form onSubmit={this.handleSubmit}>\n                <label htmlFor=\"new-password\">New Password</label>\n                <input \n                  name=\"newPassword\"\n                  id=\"new-password\" \n                  type=\"text\" \n                  onChange={e => this.updateNewPassword(e.target.value)}\n                  required\n                />\n                {this.state.newPassword.touched && <ValidationError message={newPasswordError} />}\n             \n                <label htmlFor=\"repeat-password\">Repeat New Password</label>\n                <input \n                  name=\"repeatNewPassword\"\n                  id=\"repeat-password\" \n                  type=\"text\"\n                  onChange={e => this.updateRepeatNewPassword(e.target.value)}\n                  required\n                />\n                {this.state.repeatNewPassword.touched && <ValidationError message={repeatNewPasswordError} />}\n        \n                <button type=\"submit\">Submit</button>\n              </form>\n          </main>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ForgotPassword from './forgot-password'\nimport { Link } from 'react-router-dom'\n\nexport default function PersonalizedHomePage(props) {\n  return (\n    <div className=\"App\">\n      <main>\n            <h1>Home</h1>\n            <div className=\"workout-btn\">\n              {/* Do I need these buttons? They are the same as in the Navbar */}\n                <button className=\"big-btn\">Past Workouts</button>\n                <button className=\"big-btn\">New Workout</button>\n            </div>\n            <div className=\"acct-info\">\n            <h2>Account Information</h2>\n                <h3>Password</h3>\n                <Link\n                  to='/forgot-password'\n                >\n                  <button\n                  >Change</button>\n                </Link>\n            </div>\n        </main>\n      {/* <ForgotPassword /> */}\n    </div>\n  );\n}\n","import React from 'react'\nimport './circle-button.css'\n\nexport default function NavCircleButton(props) {\n  const { tag, className, children, ...otherProps } = props\n\n  return React.createElement(\n    props.tag,\n    {\n      className: ['NavCircleButton', props.className].join(' '),\n      ...otherProps\n    },\n    props.children\n  )\n}\n\nNavCircleButton.defaultProps ={\n  tag: 'a',\n}","import React from 'react';\nimport CircleButton from './CircleButton/circle-button'\n\nexport default function ViewPastWorkout(props) {\n  return (\n    <div className=\"App\">\n      <main className=\"main\">\n            <h1>Workout Name</h1>\n            <h2>EMOM 10</h2>\n            <p>Minute 1: 15 situps</p>\n            <p>Minute 2: 20 lunges</p>\n            <CircleButton onClick={props.history.goBack}>\n          Go Back\n        </CircleButton>\n        </main>\n    </div>\n    \n  );\n}\n","import React from 'react';\nimport ViewPastWorkout from './view-past-workout'\nimport { Link } from 'react-router-dom'\n\nexport default function PastWorkouts(props) {\n  return (\n    <div className=\"App\">\n      <main className=\"main\">\n            <h1>Past Workouts</h1>\n            <table className=\"workouts-table\">\n                <tr>\n                    <th className=\"tb-name\">Name</th>\n                    <th className=\"tb-date\">Date</th>\n                    <th className=\"tb-view\">View Workout</th>\n                </tr>\n                <tr>\n                    <th>Example Name: Workout 1</th>\n                    <th>March 21, 2020</th>\n                    {/* This button will link to the ViewPastWorkout\n                    component, depending on the workout_id */}\n                    <th>\n                        <button>\n                          <Link\n                            to=\"/past-workouts/:workout_id\"\n                          >\n                            View\n                          </Link>\n                        </button>\n                    </th>\n                </tr>\n            </table>\n            <Link\n              to='/create-workout'\n            >\n              <button>Create Workout</button>\n            </Link>\n        </main>\n    </div>\n  );\n}\n","import React from \"react\";\n\nconst Checkbox = ({ label, isSelected, onCheckboxChange }) => (\n  <div className=\"form-check\">\n    <label>\n      <input\n        type=\"checkbox\"\n        name={label}\n        checked={isSelected}\n        onChange={onCheckboxChange}\n        className=\"form-check-input\"\n      />\n      {label}\n    </label>\n  </div>\n);\n\nexport default Checkbox;","import React from 'react';\nimport Checkbox from './new-workout-checkbox'\n\nconst OPTIONS = ['isArms', 'isLegs', 'isChest', 'isBack', 'isCore', 'isCardio', 'isAdvanced']\n\nexport default class CreateNewWorkout extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      workoutTimeValue: '',\n      workoutMuscleGroup: {\n        isArms: {\n          checked: false,\n        },\n        isLegs: {\n          checked: false,\n        },\n        isChest: {\n          checked: false,\n        },\n        isBack: {\n          checked: false,\n        },\n        isCore: {\n          checked: false,\n        },\n        isCardio: {\n          checked: false,\n        },\n        isAdvanced: {\n          checked: false,\n        }\n      },\n\n      // workoutMuscleGroup: OPTIONS.reduce(\n      //   (options, option) => ({\n      //     ...options, \n      //     [option]: false\n      //   }),\n      //   {}\n      // ),\n\n      workoutTypeValue: '',\n      errors: {\n        workoutTimeValue: 'You must select one option',\n        workoutMuscleGroup: 'You must select at least one option',\n        workoutTypeValue: 'You must select one option',\n      }\n    }\n\n    this.handleArmsChange = this.handleArmsChange.bind(this)\n    this.handleLegsChange = this.handleLegsChange.bind(this)\n    this.handleChestChange = this.handleChestChange.bind(this)\n    this.handleBackChange = this.handleBackChange.bind(this)\n    this.handleCoreChange = this.handleCoreChange.bind(this)\n    this.handleCardioChange = this.handleCardioChange.bind(this)\n    this.handleAdvancedChange = this.handleAdvancedChange.bind(this)\n  }\n\n  //need logic that says if user clicks \"Arms\" then change the state of ifArms to true\n  // selectAllMuscleGroups = isSelected => {\n  //   Object.keys(this.state.workoutMuscleGroup).forEach(checkbox => {\n  //     this.setState(prevState => ({\n  //       workoutMuscleGroup: {\n  //         ...prevState.workoutMuscleGroup,\n  //         [checkbox]: isSelected\n  //       }\n  //     }));\n  //   });\n  // }\n\n  // handleCheckboxChange = changeEvent => {\n  //   const { name } = changeEvent.target;\n\n  //   this.setState(prevState => ({\n  //     workoutMuscleGroup: {\n  //       ...prevState.checkboxes,\n  //       [name]: !prevState.checkboxes[name]\n  //     }\n  //   }));\n  // };\n\n  handleArmsChange() {\n    this.setState({ workoutMuscleGroup: {isArms: {checked: true} }})\n  }\n\n  handleLegsChange() {\n    this.setState({ workoutMuscleGroup: {isLegs: {checked: true} }})\n  }\n\n  handleChestChange() {\n    this.setState({ workoutMuscleGroup: {isChest: {checked: true} }})\n  }\n\n  handleBackChange() {\n    this.setState({ workoutMuscleGroup: {isBack: {checked: true} }})\n  }\n\n  handleCoreChange() {\n    this.setState({ workoutMuscleGroup: {isCore: {checked: true} }})\n  }\n\n  handleCardioChange() {\n    this.setState({ workoutMuscleGroup: {isCardio: {checked: true} }})\n  }\n\n  handleAdvancedChange() {\n    this.setState({ workoutMuscleGroup: {isAdvanced: {checked: true} }})\n  }\n\n  //handleSubmit - takes user right to the newly created workout \n  //is the handleSubmit a POST request? we are posting their responses but then getting the info back...?\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Object.keys(this.state.workoutMuscleGroup)\n    //   .filter(checkbox => this.state.workoutMuscleGroup[checkbox])\n    //   .forEach(checkbox => {\n    //     console.log(checkbox, \"is selected.\");\n    // });\n\n    console.log(this.state);\n\n    //create an object to store the search filters\n    const data = {}\n    //get all the from data from the form component\n    const formData = new FormData(e.target)\n\n    //for each of the keys in form data populate it with form value\n    for (let value of formData) {\n        data[value[0]] = value[1]\n    }\n    console.log(data)\n\n    let { isArms, isLegs, isChest, isBack, isCore, isCardio, isAdvanced } = data\n\n  // //POST request to API endpoint (/users)\n\n  // //check if the state is populated with the search params data\n  // console.log(this.state)\n\n  //const searchURL = `${config.API_ENDPOINT}/sign-up`\n\n  // const queryString = this.formatQueryParams(data)\n\n   //sent all the params to the final url\n   //const url = searchURL + '?' + queryString\n\n  //  console.log(url)\n\n  //   //define the API call parameters\n  //   const options = {\n  //       method: 'POST',\n  //       header: {\n  //           \"Authorization\": \"\",\n  //           \"Content-Type\": \"application/json\"\n  //       }\n  //   }\n\n  //   //useing the url and paramters above make the api call\n  //   fetch(url, options)\n\n  //       // if the api returns data ...\n  //       .then(res => {\n  //           if (!res.ok) {\n  //               throw new Error('Something went wrong, please try again later.')\n  //           }\n  //            // ... convert it to json\n  //            return res.json()\n  //       })\n  //           // use the json api output\n  //       .then(data => {\n\n  //         //check if there is meaningfull data\n  //         console.log(data);\n  //         // check if there are no results\n  //         if (data.totalItems === 0) {\n  //           throw new Error('No data found')\n  //       }\n\n  //     })\n  //       .catch(err => {\n  //         this.setState({\n  //           error: err.message\n  //       })\n  //     })\n}\n  \n  render() {\n  return (\n      <div className=\"App\">\n        <main className=\"main\">\n          <h1>Create New Workout</h1>\n            <br />\n            <form onSubmit={this.handleSubmit}>\n            {/* Just select one of these - need error message */}\n            <h2>How long do you want to workout for?</h2>\n              <div className=\"workout-time\">\n                <label htmlFor=\"time-1\">Less than 5 minutes</label>\n                <input type=\"radio\" id=\"time-1\"name=\"workoutTimeValue\" />\n                <label htmlFor=\"time-2\">6-10 minutes</label>\n                <input type=\"radio\" id=\"time-2\" name=\"workoutTimeValue\"/>\n                <label htmlFor=\"time-3\">11-15 minutes</label>\n                <input type=\"radio\" id=\"time-3\" name=\"workoutTimeValue\"/>\n                <label htmlFor=\"time-4\">16-20 minutes</label>\n                <input type=\"radio\" id=\"time-4\" name=\"workoutTimeValue\"/>\n                <label htmlFor=\"time-5\">21-25 minutes</label>\n                <input type=\"radio\" id=\"time-5\" name=\"workoutTimeValue\"/>\n                <label htmlFor=\"time-6\">26-30 minutes</label>\n                <input type=\"radio\" id=\"time-6\" name=\"workoutTimeValue\" />\n                <p className=\"error-msg\">Must select one option</p>\n              </div>\n            <br />\n            <br />\n            {/* Can select as many as user wants - need error message */}\n            <h2>What muscle groups do you want to work?</h2>\n                <label htmlFor=\"isArms\">Arms</label>\n                <input type=\"checkbox\" id=\"isArms\" name=\"workoutMuscleGroup\" value=\"isArms\" onClick={this.handleArmsChange} />\n                <label htmlFor=\"isLegs\" >Legs</label>\n                <input type=\"checkbox\" id=\"isLegs\" name=\"workoutMuscleGroup\" value=\"isLegs\" onClick={this.handleLegsChange} />\n                <label htmlFor=\"isChest\">Chest</label>\n                <input type=\"checkbox\" id=\"isChest\" name=\"workoutMuscleGroup\" value=\"isChest\" onClick={this.handleChestChange} />\n                <label htmlFor=\"isBack\">Back</label>\n                <input type=\"checkbox\" id=\"isBack\" name=\"workoutMuscleGroup\" value=\"isBack\" onClick={this.handleBackChange} />\n                <label htmlFor=\"isCore\">Core</label>\n                <input type=\"checkbox\" id=\"isCore\" name=\"workoutMuscleGroup\" value=\"isCore\" onClick={this.handleCoreChange} />\n                <label htmlFor=\"isCardio\">Cardio</label>\n                <input type=\"checkbox\" id=\"isCardio\" name=\"workoutMuscleGroup\" value=\"isCardio\" onClick={this.handleCardioChange} />\n                <label htmlFor=\"isAdvanced\">Advanced Movements</label>\n                <input type=\"checkbox\" id=\"isAdvanced\" name=\"workoutMuscleGroup\" value=\"isAdvanced\" onClick={this.handleAdvancedChange} />\n\n                <p className=\"error-msg\">Must select at least one option</p>\n            <br />\n            <br />\n            {/* Just select one of these - need error message */}\n            <h2>What style of workout would you like?</h2>\n                <label htmlFor=\"emom\">EMOM (Every Minute On the Minute)</label>\n                <input type=\"radio\" id=\"emom\" name=\"workoutTypeValue\"/>\n                <label htmlFor=\"amrap\">AMRAP (As Many Rounds As Possible)</label>\n                <input type=\"radio\" id=\"amrap\" name=\"workoutTypeValue\"/>\n                <label htmlFor=\"rft\">RFT (Rounds Fot Time)</label>\n                <input type=\"radio\" id=\"rft\" name=\"workoutTypeValue\"/>\n                <p className=\"error-msg\">Must select one option</p>\n            <br />\n            <br />\n            <button className=\"big-btn\">GO!!</button>\n            </form>\n        </main>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nexport default function Header(props) {\n  return (\n    <div className=\"App\">\n      <main className=\"main\">\n        <h1>MyMetcon Workout Creator</h1>\n      </main>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Link  } from 'react-router-dom'\nimport ValidationError from './validation-error'\n\nexport default class Login extends React.Component {\n  state = {\n    error: null,\n    loginEmail: {\n      value: '',\n      touched: false\n    },\n    loginPassword: {\n      value: '',\n      touched: false\n    },\n    errors: {\n      loginEmail: 'You must enter a valid email',\n      loginPassword: 'You must enter a valid password',\n    }\n}\n\n  // formatQueryParams(params) {\n  //   const queryItems = Object.keys(params)\n  //       .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n  //   return queryItems.join('&')\n  // }\n\n  updateEmail(email) {\n    this.setState({ loginEmail: {value: email, touched: true } })\n  }\n\n  updatePassword(password) {\n    this.setState({ loginPassword: { value: password, touched: true } })\n  }\n\n  validateEmail(inputEmail) {\n    if (inputEmail == undefined) {\n       inputEmail = this.state.loginEmail.value.trim();\n    }\n    const mailFormat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if (!inputEmail.match(mailFormat)) {\n      return 'Valid email is required'\n    } return ' '\n  }\n\n  validatePassword(inputPassword) {\n    if (inputPassword == undefined) {\n      inputPassword = this.state.loginPassword.value.trim();\n   }\n    const passwordFormat = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])\\w{8,}$/;\n    if (!inputPassword.match(passwordFormat)) {\n      return 'Valid password is required'\n    } return ' '\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    //create an object to store the search filters\n    const data = {}\n\n    //get all the from data from the form component\n    const formData = new FormData(e.target)\n\n    //for each of the keys in form data populate it with form value\n    for (let value of formData) {\n        data[value[0]] = value[1]\n    }\n    console.log(data)\n    let {loginEmail, loginPassword} = data\n  \n    if (this.validateEmail(loginEmail) === '') {\n      this.setState({\n          error: 'email is not valid'\n      })\n    }\n    if (this.validatePassword(loginPassword) === '') {\n      this.setState({\n          error: 'password is not valid'\n      })\n    }\n    //assigning the object from the form data to params in the state\n    // this.setState({\n    //     loginEmail.value: data.loginEmail,\n    //     loginPassword.value: data.loginPassword\n    // })\n\n    //check if the state is populated with the search params data\n    console.log(this.state)\n\n  //   const searchURL = `${config.API_ENDPOINT}/log-in`\n\n  //   const queryString = this.formatQueryParams(data)\n\n  //    //sent all the params to the final url\n  //   const url = searchURL + '?' + queryString\n\n  //   console.log(url)\n\n  //   const options = {\n  //     method: 'GET',\n  //     header: {\n  //         \"Authorization\": \"\",\n  //         \"Content-Type\": \"application/json\"\n  //     }\n  // }\n\n  // //useing the url and paramters above make the api call\n  // fetch(url, options)\n\n  //     // if the api returns data ...\n  //     .then(res => {\n  //         if (!res.ok) {\n  //             throw new Error('Something went wrong, please try again later.')\n  //         }\n  //          // ... convert it to json\n  //          return res.json()\n  //     })\n  //         // use the json api output\n  //     .then(data => {\n\n  //       //check if there is meaningfull data\n  //       console.log(data);\n  //       // check if there are no results\n  //       if (data.totalItems === 0) {\n  //         throw new Error('No user found')\n  //     }\n\n  //   })\n  //     .catch(err => {\n  //       this.setState({\n  //         error: err.message\n  //     })\n  //   })\n  }\n\n  render() {\n    const emailError = this.validateEmail();\n    const passwordError = this.validatePassword();\n    return (\n      <div className=\"App\">\n        <main>\n            <h1>Log In</h1>\n                <form \n                  className=\"login-form\"\n                  onSubmit={this.handleSubmit}\n                >\n                    <label htmlFor=\"email\">Email</label>\n                    <input \n                      name=\"loginEmail\"\n                      type=\"text\" \n                      id=\"email\"\n                      placeholder=\"Email\"\n                      onChange={e => this.updateEmail(e.target.value)}\n                      required\n                    />\n                    {this.state.loginEmail.touched && <ValidationError message={emailError} />}\n                    \n                    <label htmlFor=\"password\">Password</label>\n                    <input \n                      name=\"loginPassword\"\n                      type=\"text\" \n                      id=\"password\"\n                      placeholder=\"Password\"\n                      onChange={e => this.updatePassword(e.target.value)}\n                      required\n                    /> \n                    {this.state.loginPassword.touched && <ValidationError message={passwordError} />}\n                    <button \n                  className=\"small-btn\"\n                  type=\"submit\"\n                >\n                  Log In\n                </button>\n                </form>\n                <div>\n                    <h2>Don't have an account yet?</h2>\n                    <Link\n                      to='/sign-up'\n                    >\n                      <button \n                        className=\"small-btn\"\n                      >Sign Up</button>\n                    </Link>\n                </div>\n        </main>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nexport default class ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        };\n    }\n\n    static getDerivedStateFromError(error) {\n        return { hasError: true };\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return (\n            <h2>Something went wrong.</h2>\n            );\n        }\n        return this.props.children;\n    }\n}\n\nErrorBoundary.defaultProps = {\n    errorMessage: ''\n}","import React from 'react';\nimport { Link } from 'react-router-dom'\nimport ErrorBoundary from './error-boundary'\nimport ValidationError from './validation-error'\n\nexport default class SignUp extends React.Component {\n  state = {\n      error: null,\n      signUpEmail: {\n        value: '',\n        touched: false\n      },\n      signUpPassword: {\n        value: '',\n        touched: false\n      },\n      signUpFirstName: {\n        value: '',\n        touched: false\n      },\n      errors: {\n        signUpEmail: 'You must enter a valid email',\n        signUpPassword: 'You must enter a valid password',\n        signUpFirstName: 'You must enter a valid name'\n      }\n  }\n\n  updateEmail(email) {\n    this.setState({ signUpEmail: {value: email, touched: true } })\n  }\n\n  updatePassword(password) {\n    this.setState({ signUpPassword: { value: password, touched: true } })\n  }\n\n  updateFirstName(firstName) {\n    this.setState({ signUpFirstName: { value: firstName, touched: true } })\n  }\n\n  validateEmail(inputEmail) {\n    if (inputEmail == undefined) {\n       inputEmail = this.state.signUpEmail.value.trim();\n    }\n    const mailFormat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if (!inputEmail.match(mailFormat)) {\n      return 'Valid email is required'\n    } return ' '\n  }\n\n  validatePassword(inputPassword) {\n    if (inputPassword == undefined) {\n      inputPassword = this.state.signUpPassword.value.trim();\n   }\n    const passwordFormat = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])\\w{8,}$/;\n    if (!inputPassword.match(passwordFormat)) {\n      return 'Valid password is required'\n    } return ' '\n  }\n\n  validatateFirstName(inputFirstName) {\n    if (inputFirstName == undefined) {\n      inputFirstName = this.state.signUpFirstName.value.trim();\n   }\n    const nameFormat = /^[a-zA-Z\\-]+$/;\n    if (!inputFirstName.match(nameFormat)) {\n      return 'Name needs to be more than 2 characters'\n    } return ' '\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    //create an object to store the search filters\n    const data = {}\n    //get all the from data from the form component\n    const formData = new FormData(e.target)\n\n    //for each of the keys in form data populate it with form value\n    for (let value of formData) {\n        data[value[0]] = value[1]\n    }\n    console.log(data)\n\n    let { signUpEmail, signUpFirstName, signUpPassword } = data\n    if (this.validateEmail(signUpEmail) === '') {\n      this.setState({\n          error: 'email is not valid'\n      })\n    }\n\n    if (this.validatePassword(signUpPassword) === '') {\n      this.setState({\n          error: 'password is not valid'\n      })\n    }\n\n    if (this.validatateFirstName(signUpFirstName) === '') {\n      this.setState({\n        error: 'first name is not valid'\n      })\n    }\n\n    // this.setState({\n    //   signUpEmail.value: data.signUpEmail, \n    //   signUpFirstName.value : data.signUpFirstName,\n    //   signUpPassword.value: data.signUpPassword\n     \n    // })\n\n  //   //POST request to API endpoint (/users)\n\n  // //check if the state is populated with the search params data\n  // console.log(this.state)\n\n  //const searchURL = `${config.API_ENDPOINT}/sign-up`\n\n  const queryString = this.formatQueryParams(data)\n\n   //sent all the params to the final url\n   //const url = searchURL + '?' + queryString\n\n  //  console.log(url)\n\n  //   //define the API call parameters\n  //   const options = {\n  //       method: 'POST',\n  //       header: {\n  //           \"Authorization\": \"\",\n  //           \"Content-Type\": \"application/json\"\n  //       }\n  //   }\n\n  //   //useing the url and paramters above make the api call\n  //   fetch(url, options)\n\n  //       // if the api returns data ...\n  //       .then(res => {\n  //           if (!res.ok) {\n  //               throw new Error('Something went wrong, please try again later.')\n  //           }\n  //            // ... convert it to json\n  //            return res.json()\n  //       })\n  //           // use the json api output\n  //       .then(data => {\n\n  //         //check if there is meaningfull data\n  //         console.log(data);\n  //         // check if there are no results\n  //         if (data.totalItems === 0) {\n  //           throw new Error('No data found')\n  //       }\n\n  //     })\n  //       .catch(err => {\n  //         this.setState({\n  //           error: err.message\n  //       })\n  //     })\n}\n\n  render() {\n    const emailError = this.validateEmail();\n    const passwordError = this.validatePassword();\n    const nameError = this.validatateFirstName();\n    return (\n      <ErrorBoundary>\n      <div className=\"App\">\n        <main>\n            <h1>Sign Up</h1>\n                <form className=\"sign-up-form\" onSubmit={this.handleSubmit}>\n                \n                    <div className=\"sign-up-email\">\n                    <label htmlFor=\"email\">Email</label>\n                    <input \n                      name=\"signUpEmail\"\n                      type=\"text\" \n                      id=\"email\" \n                      placeholder=\"Email\"\n                      required\n                      onChange={e => this.updateEmail(e.target.value)}\n                    />\n                    {this.state.signUpEmail.touched && <ValidationError message={emailError} />}\n                    </div>\n                    <div className=\"sign-up-password\">\n                    <label htmlFor=\"password\">Password</label>\n                    <input \n                      name=\"signUpPassword\"\n                      type=\"text\" \n                      id=\"password\" \n                      placeholder=\"Password\"\n                      required\n                      onChange={e => this.updatePassword(e.target.value)}\n                    /> \n                    {this.state.signUpPassword.touched && <ValidationError message={passwordError} />}\n                    </div>\n                    <div className=\"sign-up-name\">\n                    <label htmlFor=\"fname\">First Name</label>\n                    <input \n                      name=\"signUpFirstName\"\n                      type=\"text\" \n                      id=\"fname\" \n                      placeholder=\"First Name\"\n                      required\n                      onChange={e => this.updateFirstName(e.target.value)}\n                    /> \n                    {this.state.signUpFirstName.touched && <ValidationError message={nameError} />}\n                    </div>\n                    <button className=\"small-btn\" type=\"submit\">Sign Up!</button>\n                </form>\n                <div>\n                    <h2>Already have an account?</h2>\n                    <button\n                    className=\"small-btn\">\n                      <Link\n                        to='/login'>\n                      Login\n                      </Link>\n                    </button>\n                </div>\n        </main>\n      </div>\n      </ErrorBoundary>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Checkbox from './new-workout-checkbox';\n\nconst OPTIONS = ['Arms', 'Legs', 'Chest', 'Back', 'Core', 'Cardio', 'Advanced'];\n\nclass CreateNewWorkout2 extends Component {\n  state = {\n    checkboxes: OPTIONS.reduce(\n      (options, option) => ({\n        ...options,\n        [option]: false\n      }),\n      {}\n    ),\n    workoutTimeValue: '',\n    workoutTypeValue: '',\n  };\n\n  selectAllCheckboxes = isSelected => {\n    Object.keys(this.state.checkboxes).forEach(checkbox => {\n      // BONUS: Can you explain why we pass updater function to setState instead of an object?\n      this.setState(prevState => ({\n        checkboxes: {\n          ...prevState.checkboxes,\n          [checkbox]: isSelected\n        }\n      }));\n    });\n  };\n\n  handleCheckboxChange = changeEvent => {\n    const { name } = changeEvent.target;\n\n    this.setState(prevState => ({\n      checkboxes: {\n        ...prevState.checkboxes,\n        [name]: !prevState.checkboxes[name]\n      }\n    }));\n  };\n\n  handleTimeChange = (e) => {\n    this.setState({ \n        workoutTimeValue: e.target.value\n    })\n  }\n\n  handleTypeChange = (e) => {\n      this.setState({\n          workoutTypeValue: e.target.value\n      })\n  }\n\n  handleFormSubmit = (e) => {\n    e.preventDefault();\n\n    Object.keys(this.state.checkboxes)\n      .filter(checkbox => this.state.checkboxes[checkbox])\n      .forEach(checkbox => {\n        console.log(checkbox, \"is selected.\");\n    });\n\n    \n    //create an object to store the search filters\n    const data = {}\n    //get all the from data from the form component\n    const formData = new FormData(e.target)\n\n     //for each of the keys in form data populate it with form value\n     for (let value of formData) {\n        data[value[0]] = value[1]\n    }\n    console.log(data)\n\n    let { checkboxes, workoutTimeValue, workoutTypeValue } = data\n    \n   // //POST request to API endpoint (/create-workout)\n\n  // //check if the state is populated with the search params data\n  // console.log(this.state)\n\n  //const searchURL = `${config.API_ENDPOINT}/create-workout`\n\n  // const queryString = this.formatQueryParams(data)\n\n   //sent all the params to the final url\n   //const url = searchURL + '?' + queryString\n\n  //  console.log(url)\n\n  //   //define the API call parameters\n  //   const options = {\n  //       method: 'POST',\n  //       header: {\n  //           \"Authorization\": \"\",\n  //           \"Content-Type\": \"application/json\"\n  //       }\n  //   }\n\n  //   //useing the url and paramters above make the api call\n  //   fetch(url, options)\n\n  //       // if the api returns data ...\n  //       .then(res => {\n  //           if (!res.ok) {\n  //               throw new Error('Something went wrong, please try again later.')\n  //           }\n  //            // ... convert it to json\n  //            return res.json()\n  //       })\n  //           // use the json api output\n  //       .then(data => {\n\n  //         //check if there is meaningfull data\n  //         console.log(data);\n  //         // check if there are no results\n  //         if (data.totalItems === 0) {\n  //           throw new Error('No data found')\n  //       }\n\n  //     })\n  //       .catch(err => {\n  //         this.setState({\n  //           error: err.message\n  //       })\n  //     })\n  };\n\n  createCheckbox = option => (\n    <Checkbox\n      label={option}\n      isSelected={this.state.checkboxes[option]}\n      onCheckboxChange={this.handleCheckboxChange}\n      key={option}\n    />\n  );\n\n  createCheckboxes = () => OPTIONS.map(this.createCheckbox);\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row mt-5\">\n          <div className=\"col-sm-12\">\n            <form onSubmit={this.handleFormSubmit}>\n                <h2>Which muscle groups would you like to work?</h2>\n\n              {this.createCheckboxes()}\n\n            <h2>How long do you want to workout for?</h2>\n              <div className=\"workout-time\">\n                <label htmlFor=\"time-1\">Less than 5 minutes</label>\n                <input type=\"radio\" id=\"time-1\"name=\"workoutTimeValue\" value=\"Less than 5 minutes\" onClick={this.handleTimeChange} />\n                <label htmlFor=\"time-2\">6-10 minutes</label>\n                <input type=\"radio\" id=\"time-2\" name=\"workoutTimeValue\" value=\"6-10 minutes\" />\n                <label htmlFor=\"time-3\">11-15 minutes</label>\n                <input type=\"radio\" id=\"time-3\" name=\"workoutTimeValue\" value=\"11-15 minutes\" />\n                <label htmlFor=\"time-4\">16-20 minutes</label>\n                <input type=\"radio\" id=\"time-4\" name=\"workoutTimeValue\" value=\"16-20 minutes\" />\n                <label htmlFor=\"time-5\">21-25 minutes</label>\n                <input type=\"radio\" id=\"time-5\" name=\"workoutTimeValue\" value=\"21-25 minutes\" />\n                <label htmlFor=\"time-6\">26-30 minutes</label>\n                <input type=\"radio\" id=\"time-6\" name=\"workoutTimeValue\" value=\"26-30 minutes\" />\n                <p className=\"error-msg\">Must select one option</p>\n              </div>    \n\n              <h2>What style of workout would you like?</h2>\n                <div className=\"workout-type\">\n                <label htmlFor=\"emom\">EMOM (Every Minute On the Minute)</label>\n                <input type=\"radio\" id=\"emom\" name=\"workoutTypeValue\" value=\"EMOM\" onClick={this.handleTypeChange} />\n                <label htmlFor=\"amrap\">AMRAP (As Many Rounds As Possible)</label>\n                <input type=\"radio\" id=\"amrap\" name=\"workoutTypeValue\" value=\"AMRAP\" />\n                <label htmlFor=\"rft\">RFT (Rounds Fot Time)</label>\n                <input type=\"radio\" id=\"rft\" name=\"workoutTypeValue\" value=\"RFT\" />    \n                </div>\n                <br />\n                <button type=\"submit\" className=\"small-btn\">\n                  Submit\n                </button>\n              {/* </div> */}\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CreateNewWorkout2;","import React from 'react';\nimport { Route, Link } from 'react-router-dom'\nimport './App2.css';\nimport LandingPage from './landing-page'\nimport Navbar from './navbar'\nimport PersonalizedHomePage from './personalized-home-page'\nimport PastWorkouts from './past-workouts'\nimport CreateNewWorkout from './create-new-workout'\nimport NewWorkoutCreated from './new-workout-created'\nimport Header from './header'\nimport Login from './log-in';\nimport SignUp from './sign-up';\nimport ViewPastWorkout from './view-past-workout';\nimport ForgotPassword from './forgot-password';\nimport CreateNewWorkout2 from './2-create-new-workout-checkbox'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      first_name: '',\n    }\n  }\n\n  //renders the Navbar\n  renderNav() {\n    return (\n      <div>\n        <Navbar />\n      </div>\n    )\n  }\n\n  //renders all of the routes \n  renderMainPages() {\n    return (\n      <div className=\"main-pages\">\n        <Route \n          exact\n          path='/'\n          component={LandingPage}\n        />\n        <Route \n          path='/home'\n          component={PersonalizedHomePage}\n        />\n        <Route \n          path='/create-workout'\n          component={CreateNewWorkout2}\n        />\n        <Route \n          exact\n          path='/past-workouts'\n          component={PastWorkouts}\n        />\n        <Route \n          path='/login'\n          component={Login}\n        />\n        <Route \n          path='/sign-up'\n          component={SignUp}\n        />\n        {/* Will need to use the workout_id here to specify which workout to view */}\n        {/* {['/', '/past-workouts/:workout_id'].map(path => ( */}\n          <Route \n          exact\n          //key={path}\n          //path={path}\n          path='/past-workouts/:workout_id'\n          component={ViewPastWorkout} \n        />\n        {/* ))} */}\n        <Route \n          path='/forgot-password'\n          component={ForgotPassword}\n        />\n        {/* need to .map here too?\n        once the workout gets created, it should go right to this page */}\n        {/* <Route\n          exact \n          path='/:workout_id'\n          component={NewWorkoutCreated}\n        /> */}\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <nav className=\"app-nav\"> {this.renderNav()} </nav>\n        <header>\n            <Link to='/'>\n              <Header />\n            </Link>\n        </header>\n\n        <main>\n          {this.renderMainPages()}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}