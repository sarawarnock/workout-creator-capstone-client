[{"/Users/sarawarnock/Projects/workout-creator-capstone-client/src/index.js":"1","/Users/sarawarnock/Projects/workout-creator-capstone-client/src/login-route.js":"2","/Users/sarawarnock/Projects/workout-creator-capstone-client/src/not-found-page.js":"3","/Users/sarawarnock/Projects/workout-creator-capstone-client/src/sign-up-route.js":"4","/Users/sarawarnock/Projects/workout-creator-capstone-client/src/create-new-workout.js":"5","/Users/sarawarnock/Projects/workout-creator-capstone-client/src/MuscleGroupQuest/muscle-group.js":"6","/Users/sarawarnock/Projects/workout-creator-capstone-client/src/services/workout-api-service.js":"7","/Users/sarawarnock/Projects/workout-creator-capstone-client/src/App-lf.js":"8","/Users/sarawarnock/Projects/workout-creator-capstone-client/src/create-workout-route.js":"9","/Users/sarawarnock/Projects/workout-creator-capstone-client/src/TimeQuest/time-quest.js":"10","/Users/sarawarnock/Projects/workout-creator-capstone-client/src/TypeQuest/type-quest.js":"11"},{"size":358,"mtime":1607133044997,"results":"12","hashOfConfig":"13"},{"size":728,"mtime":1607133489940,"results":"14","hashOfConfig":"13"},{"size":145,"mtime":1597611322190,"results":"15","hashOfConfig":"13"},{"size":826,"mtime":1607133496101,"results":"16","hashOfConfig":"13"},{"size":11570,"mtime":1607716264035,"results":"17","hashOfConfig":"13"},{"size":1603,"mtime":1607713337499,"results":"18","hashOfConfig":"13"},{"size":2084,"mtime":1607710144587,"results":"19","hashOfConfig":"13"},{"size":3597,"mtime":1607710386966,"results":"20","hashOfConfig":"13"},{"size":779,"mtime":1607710461847,"results":"21","hashOfConfig":"13"},{"size":1610,"mtime":1607715615772,"results":"22","hashOfConfig":"13"},{"size":909,"mtime":1607716002787,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"y00f6n",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/sarawarnock/Projects/workout-creator-capstone-client/src/index.js",[],"/Users/sarawarnock/Projects/workout-creator-capstone-client/src/login-route.js",[],"/Users/sarawarnock/Projects/workout-creator-capstone-client/src/not-found-page.js",[],"/Users/sarawarnock/Projects/workout-creator-capstone-client/src/sign-up-route.js",[],"/Users/sarawarnock/Projects/workout-creator-capstone-client/src/create-new-workout.js",["47","48","49"],"import React, { Component } from \"react\";\nimport Checkbox from './new-workout-checkbox';\nimport config from './config'\nimport MuscleGroup from './MuscleGroupQuest/muscle-group'\nimport TimeQuest from './TimeQuest/time-quest'\nimport TypeQuest from './TypeQuest/type-quest'\nimport TokenService from './services/token-service-lf'\nimport WorkoutApiService from \"./services/workout-api-service\";\n\nconst OPTIONS = ['Arms', 'Legs', 'Chest', 'Back', 'Core', 'Cardio', 'Advanced'];\n\nclass CreateNewWorkout extends Component {\n  constructor(props) {\n    super(props)\n    this._next = this._next.bind(this)\n    this._prev = this._prev.bind(this)\n\n    this.state = {\n      checkboxes: OPTIONS.reduce(\n        (options, option) => ({\n          ...options,\n          [option]: false\n        }),\n        {}\n      ),\n      isSubmitted: false,\n      savedWorkouts: [],\n      savedWorkoutDetails: [],\n      currentStep: 1,\n      total_length: '', \n      workout_type: '',\n      workouts_name: '',\n      data: {}\n    };\n  }\n\n  _next() {\n    let currentStep = this.state.currentStep\n    currentStep = currentStep >= 2 ? 3 : currentStep + 1\n    this.setState({\n      currentStep: currentStep\n    })\n  }\n\n  _prev() {\n    let currentStep = this.state.currentStep\n    currentStep = currentStep <= 1 ? 1 : currentStep - 1\n    this.setState({\n      currentStep: currentStep\n    })\n  }\n\n  get previousButton() {\n    let currentStep = this.state.currentStep;\n    if (currentStep !== 1) {\n      return (\n        <button\n          className=\"btn btn-secondary\"\n          type=\"button\" onClick={this._prev}\n        >\n          Previous\n        </button>\n      )\n    }\n    return null;\n  }\n\n  get nextButton() {\n    console.log(this.state)\n    let currentStep = this.state.currentStep;\n    if (currentStep < 3) {\n      return (\n        <button\n          className=\"btn btn-primary\"\n          type=\"button\" onClick={this._next}\n        >\n          Next\n        </button>\n      )\n    }\n    return null\n  }\n\n\n  //***** Do I need this if the workout is being saved and then viewed in the Past Workouts component? */\n  // componentDidMount() {\n  //     this.updateSessionUser(sessionStorage.user_id)\n    \n  //     console.log('component SavedWorkouts is mounting')\n  //     //get workouts by user ID\n  //     let getWorkoutUrl = `${config.API_ENDPOINT}/workouts/user/${TokenService.getUserId()}`;\n  //     fetch(getWorkoutUrl)\n  //         .then(response => response.json())\n  //         //map over the workouts by ID, returning each workout\n  //         //so that we can get the individual workout details for that workout (including the exercises)\n  //         .then(workouts => {\n  //             workouts.map((workout) => {\n  //                 // console.log(workout)\n  //                 //------mapping workouts to get workout details---------------------\n  //                 let getWorkoutDetailsUrl = `${config.API_ENDPOINT}/workoutdetails/workout/${workout.id}`;\n  //                 fetch(getWorkoutDetailsUrl)\n  //                     .then(response => response.json())\n  //                     .then(workoutDetails => {\n  //                         this.setState({\n  //                             savedWorkoutDetails: workoutDetails\n  //                             //savedWorkoutDetails: [...this.state.savedWorkoutDetails, ...workoutDetails]\n  //                         });\n  //                           //console.log(workoutDetails)\n  //                       })\n  //                     .catch(error => this.setState({ error }))\n  //                 //---------------------------\n  //               })\n  //             this.setState({\n  //                 savedWorkouts: workouts\n  //             });\n  //           })\n  //   }\n\n  selectAllCheckboxes = isSelected => {\n    Object.keys(this.state.checkboxes).forEach(checkbox => {\n      this.setState(prevState => ({\n        checkboxes: {\n          ...prevState.checkboxes,\n          [checkbox]: isSelected\n        }\n      }));\n    });\n  }\n  \n  handleCheckboxChange = changeEvent => {\n    const { name } = changeEvent.target;\n\n    this.setState(prevState => ({\n      checkboxes: {\n        ...prevState.checkboxes,\n        [name]: !prevState.checkboxes[name]\n      }\n    }));\n  };\n\n  handleChange(event) {\n    const {name, value} = event.target\n    this.setState({\n      [name]: value\n    })    \n  }\n\n  // handleTimeChange = (e) => {\n  //   this.setState({ \n  //     workoutTimeValue: e.target.value\n  //   })\n  // }\n\n  // handleTypeChange = (e) => {\n  //   this.setState({\n  //     workoutTypeValue: e.target.value\n  //   })\n  // }\n\n  // handleNameChange = (e) => {\n  //   this.setState({\n  //     workoutNameValue: e.target.value\n  //   })\n  // }\n\n  checkString(inputString) {\n    let outputText = inputString;\n    if (inputString === undefined) {\n        outputText = \"\";\n    }\n    if (inputString == null) {\n        outputText = \"\";\n    }\n    return outputText;\n  }\n\n  //POST to '/api/workouts' but randomize the data given the choices\n  handleFormSubmit = (e) => {\n    e.preventDefault();\n\n    Object.keys(this.state.checkboxes)\n      .filter(checkbox => this.state.checkboxes[checkbox])\n      .forEach(checkbox => {\n        //console.log(checkbox, \"is selected.\");\n    });\n\n    //create an object to store the search filters\n    const data = this.state.checkboxes\n    //get all the from data from the form component\n    const formData = new FormData(e.target)\n\n     //for each of the keys in form data populate it with form value\n     for (let value of formData) {\n        data[value[0]] = value[1]\n      }\n    console.log({data})\n    \n    let payload = {\n      is_advanced: this.checkString(data.Advanced),\n      is_arms: this.checkString(data.Arms),\n      is_back: this.checkString(data.Back),\n      is_cardio: this.checkString(data.Cardio),\n      is_chest: this.checkString(data.Chest),\n      is_core: this.checkString(data.Core),\n      is_legs: this.checkString(data.Legs),\n      total_length: data.workoutTimeValue, \n      workout_type: data.workoutTypeValue,\n      workouts_name: data.workoutNameValue\n    }\n\n    console.log(payload)\n  \n    WorkoutApiService.postWorkout(payload)\n  };\n\n  // createCheckbox = option => (\n  //   <Checkbox\n  //     label={option}\n  //     isSelected={this.state.checkboxes[option]}\n  //     onCheckboxChange={this.handleCheckboxChange}\n  //     key={option}\n  //   />\n  // );\n\n  // createCheckboxes = () => OPTIONS.map(this.createCheckbox);\n\n  render() {\n    //console.log(this.state.savedWorkouts)\n    //console.log(this.state.savedWorkoutDetails)\n    //const showWorkouts = \n    this.state.savedWorkouts.map((workout, id) => {\n    return (\n      <div className=\"workouts-list\" key={id}>\n        <h2 className=\"workouts-list-name\"> {workout.workouts_name} </h2>\n          <p> {workout.total_length} minutes</p>\n          <p> {workout.workout_type} </p>\n      </div>)\n    });\n\n    let showWorkoutDetails = []\n    for (let i = 0; i < this.state.savedWorkoutDetails.length; i++) {\n        showWorkoutDetails.push(this.state.savedWorkoutDetails[i])\n    }\n\n    console.log(showWorkoutDetails)\n\n    if (showWorkoutDetails.length !== 0) {\n      showWorkoutDetails = showWorkoutDetails.map(workoutDetail => {\n        let workoutDetailTitle = workoutDetail.title\n        let workoutDetailReps = workoutDetail.exercise_reps\n        let workoutDetailDescription = workoutDetail.description\n        return (\n            <div className=\"workout-details\">\n                <h2 key=\"reps\" className=\"exercise-reps\"> {workoutDetailReps} </h2>\n                <h3 key=\"title\" className=\"exercise-title\"> {workoutDetailTitle} </h3>\n                <h3 key=\"desc\" className=\"exercise-desc\"> {workoutDetailDescription} </h3>\n            </div>\n        )\n      });\n\n      console.log(showWorkoutDetails)\n\n    }\n    else {\n      showWorkoutDetails = `\n        <div className=\"workout-details\">\n          <h3 key=\"title\" className=\"exercise-title\"> No Workout Details </h3>\n        </div>\n      `\n    }\n    \n    return (\n      <div className=\"App\">\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <form onSubmit={this.handleFormSubmit}>\n                {/* <h2 className=\"workout-question-1\">Which muscle groups would you like to work?</h2>\n                  <div className=\"checkbox\">\n                    {this.createCheckboxes()}\n                  </div>\n\n            <h2 className=\"workout-question-2\">How long do you want to workout for?</h2>\n              <div className=\"workout-time answer-2\">\n                <input type=\"radio\" id=\"time-1\"name=\"workoutTimeValue\" value=\"5\" onClick={this.handleTimeChange} />\n                <label htmlFor=\"time-1\">5 minutes</label>\n\n                <input type=\"radio\" id=\"time-2\" name=\"workoutTimeValue\" value=\"10\" />\n                <label htmlFor=\"time-2\">10 minutes</label>\n                \n                <input type=\"radio\" id=\"time-3\" name=\"workoutTimeValue\" value=\"15\" />\n                <label htmlFor=\"time-3\">15 minutes</label>\n                \n                <input type=\"radio\" id=\"time-4\" name=\"workoutTimeValue\" value=\"20\" />\n                <label htmlFor=\"time-4\">20 minutes</label>\n                \n                <input type=\"radio\" id=\"time-5\" name=\"workoutTimeValue\" value=\"25\" />\n                <label htmlFor=\"time-5\">25 minutes</label>\n                \n                <input type=\"radio\" id=\"time-6\" name=\"workoutTimeValue\" value=\"30\" />\n                <label htmlFor=\"time-6\">30 minutes</label>\n              </div>     */}\n\n              {/* <h2 className=\"workout-question-3\">What style of workout would you like?</h2>\n                <div className=\"workout-type answer-3\">\n                \n                <input type=\"radio\" id=\"emom\" name=\"workoutTypeValue\" value=\"EMOM\" onClick={this.handleTypeChange} />\n                <label htmlFor=\"emom\">EMOM (Every Minute On the Minute)</label>\n                \n                <input type=\"radio\" id=\"amrap\" name=\"workoutTypeValue\" value=\"AMRAP\" />\n                <label htmlFor=\"amrap\">AMRAP (As Many Rounds As Possible)</label>\n\n                </div> */}\n                <MuscleGroup\n                  currentStep={this.state.currentStep}\n                  checkboxes={this.state.checkboxes}\n                  handleCheckboxChange={this.handleCheckboxChange}\n                  handleChange={this.handleChange}\n                />\n\n                <TimeQuest \n                  currentStep={this.state.currentStep}\n                  handleChange={this.handleChange}\n                />\n\n                <TypeQuest \n                  currentStep={this.state.currentStep}\n                  handleChange={this.handleChange}\n                />\n\n                <br />\n                {/* Need logic that says - \"if logged in, name workout\" */}\n                {/* <h2>Name Your Workout:</h2>\n                <div className=\"workouts-name\">\n                  <input \n                    name=\"workoutNameValue\"\n                    type=\"text\" \n                    id=\"workouts-name-input\"\n                    placeholder=\"Example: Workout 1\"\n                    onChange={this.handleNameChange}\n                  />\n                </div> */}\n                {this.previousButton}\n                {this.nextButton}\n                <br />\n                \n                <button type=\"submit\" className=\"big-btn\">\n                  Submit\n                </button>\n            </form>\n            {/* {showWorkouts[showWorkouts.length - 1]}\n            {showWorkoutDetails} */}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CreateNewWorkout;","/Users/sarawarnock/Projects/workout-creator-capstone-client/src/MuscleGroupQuest/muscle-group.js",[],"/Users/sarawarnock/Projects/workout-creator-capstone-client/src/services/workout-api-service.js",[],"/Users/sarawarnock/Projects/workout-creator-capstone-client/src/App-lf.js",[],"/Users/sarawarnock/Projects/workout-creator-capstone-client/src/create-workout-route.js",[],"/Users/sarawarnock/Projects/workout-creator-capstone-client/src/TimeQuest/time-quest.js",[],"/Users/sarawarnock/Projects/workout-creator-capstone-client/src/TypeQuest/type-quest.js",[],{"ruleId":"50","severity":1,"message":"51","line":2,"column":8,"nodeType":"52","messageId":"53","endLine":2,"endColumn":16},{"ruleId":"50","severity":1,"message":"54","line":3,"column":8,"nodeType":"52","messageId":"53","endLine":3,"endColumn":14},{"ruleId":"50","severity":1,"message":"55","line":7,"column":8,"nodeType":"52","messageId":"53","endLine":7,"endColumn":20},"no-unused-vars","'Checkbox' is defined but never used.","Identifier","unusedVar","'config' is defined but never used.","'TokenService' is defined but never used."]